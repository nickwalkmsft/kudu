<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>netcoreapp2.0</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.5" />
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="2.0.0" />
    <PackageReference Include="XmlSettings" Version="0.1.3" />
  </ItemGroup>
  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.0" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Kudu.Core\Kudu.Core.csproj" />
    <ProjectReference Include="..\Kudu.Services\Kudu.Services.csproj" />
  </ItemGroup>
  
  <ItemGroup>
    <!-- Odds and ends for the Scripts\ directory -->
    <ContentWithTargetPath Include="$(NuGetPackageRoot)KuduSync.NET\**\tools\*" TargetPath="Scripts\%(FileName)%(Extension)" CopyToOutputDirectory="Always" />
    <ContentWithTargetPath Include="$(NuGetPackageRoot)KuduHandles\**\KuduHandles.exe" TargetPath="Scripts\KuduHandles.exe" CopyToOutputDirectory="Always" />
	<!-- TODO this relative path may change -->
    <ContentWithTargetPath Include="..\..\Build\nuget.exe" TargetPath="Scripts\nuget.exe" CopyToOutputDirectory="Always" />
  </ItemGroup>
  
  <ItemGroup>
    <Folder Include="wwwroot\Content\Styles\" />
    <Folder Include="wwwroot\Content\Scripts\" />
  </ItemGroup>

  <!-- Copy Kudu.Console into the target directory -->
  <!-- CORE TODO HACK This is really only good enough for running in the debugger for now, since it relies on
       runtimeconfig.dev.json to point to dependencies in the nuget folder. When we publish Kudu.Services.Web for deployment,
       we need to publish Kudu.Console as well and make sure that all the appropriate dependencies are in the right places. -->
  <Target Name="IncludeKuduConsole" BeforeTargets="GetCopyToOutputDirectoryItems">
    <Message Importance="high" Text="COPYING FILES" />

    <!-- We can't put this ContentWithTargetPath up with the others because they are evaluated at the start of the
         build, before the node_modules directory is created. Items defined in a Target are evaluated at runtime. -->
    <!-- HACK See https://github.com/Microsoft/msbuild/issues/2844. Had to define a placeholder item and then
         build another one on top of it to get the appropriate metadata. -->
    <ItemGroup>
      <KuduConsole Include="..\Kudu.Console\bin\$(ConfigurationName)\netcoreapp2.0\kudu.dll" />
      <KuduConsole Include="..\Kudu.Console\bin\$(ConfigurationName)\netcoreapp2.0\kudu.deps.json" />
      <KuduConsole Include="..\Kudu.Console\bin\$(ConfigurationName)\netcoreapp2.0\kudu.runtimeconfig.dev.json" />
      <KuduConsole Include="..\Kudu.Console\bin\$(ConfigurationName)\netcoreapp2.0\kudu.runtimeconfig.json" />
      <ContentWithTargetPath Include="@(KuduConsole)" TargetPath="%(Filename)%(Extension)" CopyToOutputDirectory="Always" />
    </ItemGroup>
  </Target>
  
  <!-- CORE TODO this used to have a "BuildOutputsUpdated" condition that used compile timestamps. Not sure if they're still available. -->
  <!-- CORE TODO I think the best way to make this work right with publish is to restore to the source folder and then add a dynamic ContentWithTargetPath -->
  <!-- Run updateNodeModules to install kuduscript -->
  <Target Name="UpdateNodeModules" AfterTargets="Build">
    <Exec Command="&quot;$(ProjectDir)\updateNodeModules.cmd&quot; &quot;$(TargetDir)&quot;" />
  </Target>
</Project>
